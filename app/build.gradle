import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.google.devtools.ksp")
}

def calcVersionCode(int id) {
    def versionCodeFile = file("versionCode.txt")
    def versionCode = versionCodeFile.text.trim().toInteger()
    return versionCode + id
}

android {
    namespace = "io.github.saeeddev94.xray"
    compileSdk = 34

    defaultConfig {
        applicationId = "io.github.saeeddev94.xray"
        minSdk = 26
        targetSdk = 34
        versionCode = calcVersionCode(0)
        versionName = "6.8.0"

        vectorDrawables.useSupportLibrary = true
        vectorDrawables.generatedDensities = []
    }

    aaptOptions {
        cruncherEnabled = false
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    signingConfigs {
        release {
            storeFile file(getProps("KEYSTORE_FILE"))
            storePassword getProps("KEYSTORE_PASS")
            keyAlias getProps("ALIAS_NAME")
            keyPassword getProps("ALIAS_PASS")
        }
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    externalNativeBuild {
        ndkVersion = "26.2.11394342"
        ndkBuild.path = "src/main/jni/Android.mk"
    }

    packagingOptions {
        doNotStrip("**/*.so")
    }

    splits {
        abi {
            enable = true
            universalApk = false
            reset()
            //noinspection ChromeOsAbiSupport
            include abiTarget.split(',')
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def abi = it.getFilter(com.android.build.OutputFile.ABI)
            switch(abi) {
                case "armeabi-v7a":
                    it.versionCodeOverride = calcVersionCode(1)
                    break
                case "arm64-v8a":
                    it.versionCodeOverride = calcVersionCode(2) 
                    break
                case "x86":
                    it.versionCodeOverride = calcVersionCode(3) 
                    break
                case "x86_64":
                    it.versionCodeOverride = calcVersionCode(4) 
                    break
            }
            it.outputFileName = it.outputFileName.replace(project.name, "Xray-v${defaultConfig.versionName}").replace("-release", "")
        }
    }
}

project.afterEvaluate {
    tasks.compileReleaseArtProfile.doLast {
        outputs.files.each { file ->
            if (file.toString().endsWith(".profm")) {
                println("Sorting ${file} ...")
                def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                def profile = ArtProfileKt.ArtProfile(file)
                def keys = new ArrayList(profile.profileData.keySet())
                def sortedData = new LinkedHashMap()
                Collections.sort keys, new DexFile.Companion()
                keys.each { key -> sortedData[key] = profile.profileData[key] }
                new FileOutputStream(file).with {
                    write(version.magicBytes$profgen)
                    write(version.versionBytes$profgen)
                    version.write$profgen(it, sortedData, "")
                }
            }
        }
    }
}

dependencies {
    implementation(fileTree(dir: "libs", include: ["*.aar", "*.jar"]))
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.9.22"))
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("androidx.room:room-ktx:2.6.1")
    implementation("androidx.room:room-runtime:2.6.1")
    ksp("androidx.room:room-compiler:2.6.1")
    implementation("com.blacksquircle.ui:editorkit:2.9.0")
    implementation("com.blacksquircle.ui:language-json:2.9.0")
    implementation("com.google.android.material:material:1.11.0")
}

def requireLocalProperties() {
    if (!project.ext.has("localProperties")) {
        def localProperties = new Properties()
        project.ext.set("localProperties", localProperties)

        String base64 = System.getenv("LOCAL_PROPERTIES")
        if (base64) {
            localProperties.load(new ByteArrayInputStream(Base64.getDecoder().decode(base64)))
        } else {
            def file = rootProject.file("local.properties")
            if (file.exists()) {
                localProperties.load(new FileInputStream(file))
            }
        }
    }

    return project.ext.get("localProperties")
}

def getProps(String propName) {
    def lp = requireLocalProperties()
    String value = lp[propName]
    return value ? value : ""
}
